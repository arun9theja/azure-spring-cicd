trigger:
  - develop

resources:
  - repo: self

variables:
  ACR_NAME: 'azurespringci.azurecr.io'
  ACR_CONNECTION: 'azurespringci'
  IMAGE_NAME: 'devops'
  IMAGE_TAG: '$(Build.BuildId)'
  KUBE_NAMESPACE: 'default'
  AKS_RESOURCE_GROUP: 'myResourceGroup'
  AKS_CLUSTER_NAME: 'argo-aks'
  HELM_RELEASE_NAME: 'devops-app'
  DOCKERFILE_PATH: '**/Dockerfile'
  IMAGE_PULL_SECRET: 'azure-auth'
  K8S_SERVICE_CONNECTION: 'myspringboot'

stages:
  - stage: Build
    displayName: üî® Build and Push Docker Image
    jobs:
      - job: BuildAndPush
        displayName: üöÄ Build and Push Image
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Docker@2
            displayName: üèóÔ∏è Build & Push Docker Image
            inputs:
              command: buildAndPush
              repository: $(IMAGE_NAME)
              dockerfile: $(DOCKERFILE_PATH)
              containerRegistry: $(ACR_CONNECTION)
              tags: |
                $(IMAGE_TAG)

  - stage: Deploy
    displayName: üöÄ Deploy to AKS
    jobs:
      - job: DeployToAKS
        displayName: üèóÔ∏è Deploy Helm Chart
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self

          - task: HelmInstaller@1
            displayName: üì• Install Helm
            inputs:
              helmVersion: 'latest'

          - task: KubernetesManifest@0
            displayName: üîë Create ImagePullSecret
            inputs:
              action: createSecret
              secretName: $(IMAGE_PULL_SECRET)
              dockerRegistryEndpoint: $(ACR_CONNECTION)
              kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)

          - task: HelmDeploy@0
            displayName: üöÄ Deploy Helm Chart to AKS
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(K8S_SERVICE_CONNECTION)
              namespace: $(KUBE_NAMESPACE)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'helm/devops-chart'
              releaseName: $(HELM_RELEASE_NAME)
              overrideValues: |
                image.repository=$(ACR_NAME)/$(IMAGE_NAME)
                image.tag=$(IMAGE_TAG)
                imagePullSecrets[0].name=$(IMAGE_PULL_SECRET)
              install: true
            name: helmDeploy

          - script: |
              echo "üö® Deployment failed! Rolling back to the last stable release..."
              helm rollback $(HELM_RELEASE_NAME) --namespace $(KUBE_NAMESPACE)
            displayName: üîÑ Rollback on Failure
            condition: failed()
